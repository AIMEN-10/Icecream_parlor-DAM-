--------add new admin-----------------
create proc admin1(
@Email varchar(100),
@username varchar(100),
@password varchar(100)
)
as
begin 
declare @count int=0
select @count=count(*) from admin where email=@Email
if(@count=1)
print'abc'

else
insert into admin (username,email,password) values (@username,@email,@password);
end;
--------------------------add new products----------------
CREATE TRIGGER trg_product_name_validation
ON product
AFTER INSERT
AS
BEGIN
    -- Declare a variable to store the name
    DECLARE @name VARCHAR(100);

    -- Retrieve the name from the inserted row
    SELECT @name = name FROM inserted;

    -- Check if the name matches any of the specified patterns
    IF NOT (@name LIKE '%sandwitch%' OR 
            @name LIKE '%sandwitches%' OR 
            @name LIKE '%sundaes%' OR 
            @name LIKE '%sundae%' OR 
            @name LIKE '%stick%' OR 
            @name LIKE '%sticks%' OR 
            @name LIKE '%bar%' OR 
            @name LIKE '%bars%' OR 
            @name LIKE '%blizzard%' OR 
            @name LIKE '%cups%' OR 
            @name LIKE '%cup%' OR 
            @name LIKE '%cones%' OR 
            @name LIKE '%cone%' OR 
            @name LIKE '%mochi%' OR 
            @name LIKE '%tacos%' OR 
            @name LIKE '%pie%' OR 
            @name LIKE '%pies%' OR 
            @name LIKE '%bombs%' OR 
            @name LIKE '%macarones%' OR 
            @name LIKE '%popsicles%' OR 
            @name LIKE '%screwballs%')
    BEGIN
        -- If the name does not match, raise an error and rollback the transaction
        RAISERROR('The product name does not meet the required keywords.', 16, 1);
        ROLLBACK TRANSACTION;
    END
END;


CREATE PROCEDURE InsertProduct
    @name VARCHAR(100),
    @singlep INT,
    @doublep INT,
    @familyp INT,
    @path VARCHAR(100)
AS
BEGIN
    INSERT INTO product (name, singlep, doublep, familyp, path)
    VALUES (@name, @singlep, @doublep, @familyp, @path);
END;
--------------------show product-------------------
CREATE PROCEDURE show_product
    @name VARCHAR(50),
    @singlep VARCHAR(50) OUTPUT,
    @doublep VARCHAR(50) OUTPUT,
    @familyp VARCHAR(50) OUTPUT,	  
    @path VARCHAR(50) OUTPUT		
AS
BEGIN
    DECLARE @s_p VARCHAR(50), @d_p VARCHAR(50), @f_p VARCHAR(50), @p VARCHAR(50);

   
    DECLARE @show_Table TABLE (
	    name varchar(100),
        singlep VARCHAR(50),
        doublep VARCHAR(50),
        familyp VARCHAR(50),
        path VARCHAR(50)
    );

    
    INSERT INTO @show_Table (name,singlep, doublep, familyp, path)
    SELECT name,singlep, doublep, familyp, path
    FROM product 
    WHERE name = @name;

   
    SELECT 
        @singlep = singlep,
        @doublep = doublep,
        @familyp = familyp,
        @path = path
    FROM @show_Table;

   
    SELECT name,singlep, doublep, familyp, path FROM @show_Table;
END;


---------------------------orders-------------------
create proc order_proc(
@dt datetime,
@id int,
@bill int
)
as
begin 

insert into orders(order_time,order_id,bill) values (@dt,@id,@bill);
end;
select * from orders_list
##########################
create proc o_proc(
@id int,
@val varchar(100),
@detail varchar(100),
@quant varchar(100)
)
as
begin 

insert into orders_list(order_id,name,detail,quantity) values (@id,@val,@detail,@quant);
end;
-----------------------------------ADMIN LOGIN-------------
CREATE PROCEDURE login_5
    @Username VARCHAR(50),
    @Password VARCHAR(50) OUTPUT
AS
BEGIN
    DECLARE @Pwd VARCHAR(50);

    DECLARE @PasswordTable TABLE (Password VARCHAR(50));

    DECLARE cur_login CURSOR STATIC FOR
    SELECT password FROM admin WHERE username = @Username;

    OPEN cur_login;

    FETCH NEXT FROM cur_login INTO @Pwd;
    IF @@FETCH_STATUS = 0
    BEGIN
        
        INSERT INTO @PasswordTable (Password) VALUES (@Pwd);
        
       
        SET @Password = @Pwd;
    END

    CLOSE cur_login;
    DEALLOCATE cur_login;

  
    SELECT Password FROM @PasswordTable;
END;
--------------------form 6 display-------------
CREATE PROCEDURE fetch_p(
 @s VARCHAR(100),
    @p VARCHAR(100)
	)
AS
BEGIN
   
    SELECT * FROM product  WHERE name LIKE '%' + @s + '%' OR name LIKE '%' + @p + '%';
END;

CREATE PROCEDURE fetch_diff(
   @a VARCHAR(100) ,
    @b VARCHAR(100),
    @c VARCHAR(100),
    @d VARCHAR(100),
    @e VARCHAR(100) ,
	 @f VARCHAR(100) 
	)
AS
BEGIN
   
    SELECT * FROM product  WHERE name LIKE '%' + @a + '%' OR name LIKE '%' + @b + '%' OR name LIKE '%' + @c + '%' OR name LIKE '%' + @d + '%' OR name LIKE '%' + @e + '%' OR name LIKE '%' + @f + '%';
END;

--------to display procedures ------------------
SELECT name, object_definition(object_id) AS definition, create_date
FROM sys.procedures;
-----drop proc------------
DROP PROCEDURE fetch_diff;
------order id_--------------
CREATE PROCEDURE Order_id(
  @id VARCHAR(100) )
AS
BEGIN
   

    Select top 1 * from orders order by order_id  desc ;
END;
-----------form 8--------------
CREATE PROCEDURE admin_display(
  @a  VARCHAR(100),
   @b VARCHAR(100)
  )
AS
BEGIN
   
   
    Select * from orders ;
END;

CREATE PROCEDURE admin_display_det(
  @a  VARCHAR(100)
  
  )
AS
BEGIN
   
   
    Select * from orders_list where order_id=@a ;
END;

----delete (CHECK POINT)
CREATE PROCEDURE DelETE_PROC
    @name VARCHAR(100)
AS
BEGIN
    DELETE FROM product WHERE name = @name;
END;


CREATE TRIGGER trg_delETE_PROC
ON product
AFTER DELETE
AS
BEGIN

    DECLARE @count int=0
    SELECT @count=count(*) FROM deleted;

    IF @count=0
    BEGIN
        RAISERROR('Product does not exist.', 16, 1);
		ROLLBACK TRANSACTION  
    END
END;
